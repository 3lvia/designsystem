const gulp = require('gulp');
var header = require('gulp-header');
const babel = require('gulp-babel');
const tap = require('gulp-tap');
const replace = require('gulp-replace');
const sass = require('sass');
const del = require('del');
const mergeStream = require('merge-stream');
const path = require('path');
const components = require('../elvia-components.config');

const WARNING = `/* 
 * THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE OVERWRITTEN.
 * DO NOT MAKE CHANGES TO THIS FILE DIRECTLY
 */
`
// Distribute Web component for users
function buildWebComponentsToDistributeFolder() {
    const tasks = components.map((component) => {
        return gulp.src(`../components/${component.name}/src/web_component/**/*`).pipe(header(WARNING))
            .pipe(tap(function (file, t) {
                if (path.basename(file.path).indexOf('.ts') === -1 ||
                    path.basename(file.path).indexOf('.d.ts') === 1) {
                    return;
                }
                const componentname = path.basename(file.path, '.ts');
                const result = sass.renderSync({ file: `../components/${component.name}/src/react/style.scss` });

                file.contents = new Buffer(String(file.contents)
                    .replace(/{{INSERT_STYLE_HERE}}/, result.css.toString()));
            }))
            .pipe(gulp.dest(`../components/${component.name}/dist/web_component/ts/`))
    });
    return mergeStream(tasks);
};

// Convert Typescript and JSX/TSX to JS 
function TSX_to_JS() {
    const tasks = components.map((component) => {
        return mergeStream(
            gulp.src(`../components/${component.name}/src/react/**/*.tsx`)
                .pipe(babel({
                    "presets": [
                        "@babel/preset-typescript"
                    ],
                    "plugins": [
                        "@babel/plugin-transform-react-jsx",
                    ]
                })).pipe(header(WARNING))
                .pipe(gulp.dest(`../components/${component.name}/dist/react/js/`)),

            gulp.src([`../components/${component.name}/src/react/**/*.scss`, `../components/${component.name}/src/react/**/*.d.ts`]).pipe(
                gulp.dest(`../components/${component.name}/dist/react/js/`)
            )
        );
    });
    return mergeStream(tasks);
}

function buildWebComponentsToDistributeJSFolder() {
    const tasks = components.map((component) => {
        return mergeStream(gulp.src(`../components/${component.name}/dist/web_component/ts/**/*.ts`)
            .pipe(babel({
                "presets": [
                    "@babel/preset-typescript"
                ],
            }))
            .pipe(gulp.dest(`../components/${component.name}/dist/web_component/js/`)));
    });
    return mergeStream(tasks);
}

function buildElviaComponentToJS() {
    return gulp.src(`../components/elvia-component/src/*.ts`)
        .pipe(babel({
            "presets": [
                "@babel/preset-typescript"
            ],
        })).pipe(header(WARNING))
        .pipe(gulp.dest(`../components/elvia-component/dist/`));
}

// TODO: Find a way to do cleanup that does not trigger rebuild
function cleanup() {
    return del(['../components/**/dist/**/*'], { force: true });
}

gulp.task('cleanup', gulp.series(cleanup, function (done) { done(); console.log("Clean up - Done!") }));

gulp.task(
    'default',
    gulp.series(
        //cleanup,
        TSX_to_JS,
        buildWebComponentsToDistributeFolder,
        buildWebComponentsToDistributeJSFolder,
        buildElviaComponentToJS,
        function (done) {
            done();
            console.log('Successfully built Elvia Components!');
        },
    ),
);


gulp.task('watch', function () {

    gulp.watch(
        ['../components/*/src/**/*'], { ignoreInitial: false },
        gulp.series('default'),
    );
});
