const gulp = require('gulp');
var header = require('gulp-header');
const babel = require('gulp-babel');
const tap = require('gulp-tap');
const replace = require('gulp-replace');
const sass = require('sass');
const del = require('del');
const mergeStream = require('merge-stream');
const path = require('path');
const components = require('../elvia-components.config');

const WARNING = `/* 
 * THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE OVERWRITTEN.
 * DO NOT MAKE CHANGES TO THIS FILE DIRECTLY
 */
`

// Distribute React component as is for users
function copyReactComponentsToDistFolder() {
    const tasks = components.map((component) => {
        return gulp.src(`../components/${component.name}/src/react/**/*`).pipe(header(WARNING)).pipe(gulp.dest(`../components/${component.name}/dist/react/tsx`));
    })
    return mergeStream(tasks);
};

// This function is a workaround to bypass the /src folder restriction given by "Create React App"
function copyReactComponentsToFrameworkFolder() {
    return gulp.src('../components/elvia-popover/src/react/**/*').pipe(header(WARNING))
        .pipe(gulp.dest('../frameworks/react/src/components/'));
};

// Distribute Web component for users
function buildWebComponentsToDistributeFolder() {
    const tasks = components.map((component) => {
        return gulp.src(`../components/${component.name}/src/web_component/**/*`).pipe(header(WARNING))
            .pipe(tap(function (file, t) {
                if (path.basename(file.path).indexOf('.ts') === -1 ||
                    path.basename(file.path).indexOf('.d.ts') === 1) {
                    return;
                }
                const componentname = path.basename(file.path, '.ts');
                const result = sass.renderSync({ file: `../components/${component.name}/src/react/style.scss` });

                file.contents = new Buffer(String(file.contents)
                    .replace(/{{INSERT_STYLE_HERE}}/, result.css.toString()));
            }))
            .pipe(gulp.dest(`../components/${component.name}/dist/web_component/ts/`));
    });
    return mergeStream(tasks);
};

// Convert Typescript and JSX/TSX to JS 
function TSX_to_JS() {
    const tasks = components.map((component) => {
        return mergeStream(
            gulp.src(`../components/${component.name}/src/react/**/*.tsx`)
                .pipe(babel({
                    "presets": [
                        "@babel/preset-typescript"
                    ],
                    "plugins": [
                        "@babel/plugin-transform-react-jsx",
                    ]
                }))
                .pipe(gulp.dest(`../components/${component.name}/dist/react/js/`)),

            gulp.src([`../components/${component.name}/src/react/**/*`, `!../components/${component.name}/src/react/**/*.tsx`]).pipe(
                gulp.dest(`../components/${component.name}/dist/react/js/`)
            )
        );
    });
    return mergeStream(tasks);
}

// Convert Typescript and JSX/TSX to JS 
function TSX_to_JSX() {
    const tasks = components.map((component) => {
        return mergeStream(
            gulp.src(`../components/${component.name}/src/react/**/*.tsx`)
                .pipe(babel({
                    "presets": [
                        "@babel/preset-typescript"
                    ],
                    "plugins": [
                        "@babel/plugin-transform-typescript",
                    ]
                }))
                .pipe(gulp.dest(`../components/${component.name}/dist/react/jsx/`)),

            gulp.src([`../components/${component.name}/src/react/**/*`, `!../components/${component.name}/src/react/**/*.tsx`]).pipe(
                gulp.dest(`../components/${component.name}/dist/react/jsx/`)
            )
        );
    });
    return mergeStream(tasks);
}

function buildWebComponentsToDistributeJSFolder() {
    const tasks = components.map((component) => {
        return mergeStream(gulp.src(`../components/${component.name}/dist/web_component/ts/**/*.ts`)
            .pipe(babel({
                "presets": [
                    "@babel/preset-typescript"
                ],
            }))
            .pipe(gulp.dest(`../components/${component.name}/dist/web_component/js/`)));
    });
    return mergeStream(tasks);
}

function cleanup() {
    return del(['../dist/**/*', '!*cdn/**/*', '../frameworks/react/src/components/**/*'], { force: true });
}

gulp.task('cleanup', gulp.series(cleanup, function (done) { done(); console.log("Clean up - Done!") }));

gulp.task(
    'default',
    gulp.series(
        TSX_to_JS,
        TSX_to_JSX,
        copyReactComponentsToDistFolder,
        copyReactComponentsToFrameworkFolder,
        buildWebComponentsToDistributeFolder,
        buildWebComponentsToDistributeJSFolder,
        function (done) {
            done();
            console.log('Successfully built Elvia Components!');
        },
    ),
);


gulp.task('watch', function () {

    gulp.watch(
        ['../components/*/src/**/*'], { ignoreInitial: false },
        gulp.series('default'),
    );
});
