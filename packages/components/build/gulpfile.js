const gulp = require('gulp');
var header = require('gulp-header');
const babel = require('gulp-babel');
const tap = require('gulp-tap');
const replace = require('gulp-replace');
const sass = require('sass');
const del = require('del');
const mergeStream = require('merge-stream');
const path = require('path');

const WARNING = `/* 
 * THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE OVERWRITTEN.
 * DO NOT MAKE CHANGES TO THIS FILE DIRECTLY
 */
`

// Distribute React component as is for users
function copyReactComponentsToDistFolder() {
    return gulp.src('../src/components/react/**/*').pipe(header(WARNING))
        .pipe(gulp.dest('../dist/react/tsx/'));
};

// This function is a workaround to bypass the /src folder restriction given by "Create React App"
function copyReactComponentsToFrameworkFolder() {
    return gulp.src('../src/components/react/**/*').pipe(header(WARNING))
        .pipe(gulp.dest('../frameworks/react/src/components/'));
};

// Distribute Web component for users
function copyWebComponentsToFrameworkFolder() {
    return gulp.src('../src/components/web_components/**/*').pipe(header(WARNING))
        .pipe(tap(function (file, t) {
            if (path.basename(file.path).indexOf('.ts') === -1 ||
                path.basename(file.path).indexOf('.d.ts') === 1) {
                return;
            }
            const componentname = path.basename(file.path, '.ts');
            const result = sass.renderSync({ file: `../src/components/react/${componentname}/style.scss` });

            file.contents = new Buffer(String(file.contents)
                .replace(/{{INSERT_STYLE_HERE}}/, result.css.toString()));



        }))
        .pipe(gulp.dest('../dist/webcomponents/ts/'));
};

// Convert Typescript and JSX/TSX to JS 
function TSX_to_JS() {
    return mergeStream(
        gulp.src('../src/components/react/**/*.tsx')
            .pipe(babel({
                "presets": [
                    "@babel/preset-typescript"
                ],
                "plugins": [
                    "@babel/plugin-transform-react-jsx",
                ]
            }))
            .pipe(gulp.dest('../dist/react/js/')),

        gulp.src(['../src/components/react/**/*', '!../src/components/react/**/*.tsx']).pipe(
            gulp.dest('../dist/react/js/')
        )
    );
}

function cleanup() {
    return del(['../dist/**/*', '!*cdn/**/*', '../frameworks/react/src/components/**/*'], { force: true });
}

gulp.task('cleanup', gulp.series(cleanup, function (done) { done(); console.log("Clean up - Done!") }));

gulp.task(
    'default',
    gulp.series(
        TSX_to_JS,
        copyReactComponentsToDistFolder,
        copyReactComponentsToFrameworkFolder,
        copyWebComponentsToFrameworkFolder,
        function (done) {
            done();
            console.log('Successfully built Elvia Components!');
        },
    ),
);


gulp.task('watch', function () {

    gulp.watch(
        ['../src/**/*'], { ignoreInitial: false },
        gulp.series('default'),
    );
});
