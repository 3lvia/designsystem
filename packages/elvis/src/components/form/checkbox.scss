@use '../../variables/animation';
@use '../../variables/colors';
@use '../../variables/typography';
@use '../../utilities/colors' as colors2;
@use '../../utilities/outline';
@use '../../utilities/helpers';

$checkbox-mark-size: 24px;
$checkbox-mark-compact-size: 16px;
$checkbox-mark-border-radius: 3px;
$checkbox-mark-border: 1px solid colors.color('elvia-off');

.e-checkbox {
  display: flex;
  align-items: center;
  width: fit-content;
  box-sizing: border-box;
  cursor: pointer;
  text-align: left;

  // IE specific
  @media screen and (-ms-high-contrast: none) {
    width: 100%;
  }
  &:not(:last-child) {
    margin-bottom: 12px;
  }

  &__mark {
    display: inline-flex;
    align-self: flex-start;

    min-width: $checkbox-mark-size;
    min-height: $checkbox-mark-size;
    max-width: $checkbox-mark-size;
    max-height: $checkbox-mark-size;
    transition: background 0.2s animation.$transition-cubic;
    border: $checkbox-mark-border;
    border-radius: $checkbox-mark-border-radius;
    background: colors.color('elvia-on');
  }

  &__label {
    margin-left: 8px;
    width: fit-content;

    font-family: 'Red Hat Text', Verdana, sans-serif;
    font-size: 16px;
    line-height: 24px;
    font-weight: 400;
    color: colors.color('font-color');
  }

  &.e-checkbox--compact,
  &.e-checkbox--sm {
    .e-checkbox__mark {
      min-width: $checkbox-mark-compact-size;
      min-height: $checkbox-mark-compact-size;
      max-width: $checkbox-mark-compact-size;
      max-height: $checkbox-mark-compact-size;
    }

    .e-checkbox__label {
      @include typography.typography('text-sm');
      color: colors.color('font-color');
      line-height: 16px;
    }

    input {
      opacity: 0;
      position: absolute;
      z-index: -1;

      &:checked ~ .e-checkbox__mark {
        @extend %checkbox-mark-compact;
      }

      &:disabled:checked ~ .e-checkbox__mark {
        border-color: colors.color('disabled');
        background-color: colors.color('disabled-light');
        cursor: not-allowed;

        &:after,
        &:before {
          background-color: colors.color('disabled');
        }
      }
    }
  }

  &.e-checkbox--indeterminate {
    .e-checkbox__mark {
      position: relative;
      background: colors.color('elvia-charge');
      &::before {
        content: '';
        position: absolute;
        top: calc(50% - 1px);
        left: calc(50% - 6px);
        width: 12px;
        height: 2px;
        border-radius: 1px;
        background: black;
      }
    }

    &.e-checkbox--compact,
    &.e-checkbox--sm {
      .e-checkbox__mark::before {
        left: calc(50% - 4px);
        width: 8px;
        top: calc(50%);
        height: 1px;
      }
    }
  }

  // pseudo classes to emulate state.
  &.e-checkbox---checked &__mark {
    @extend %checkbox-mark;
  }
  // extends correct checkbox mark on compact checkboxes in pseudoclass
  &.e-checkbox--compact[class$='e-checkbox---checked'] &__mark,
  &.e-checkbox--sm[class$='e-checkbox---checked'] &__mark {
    @extend %checkbox-mark-compact;
  }

  &.e-checkbox---focus {
    .e-checkbox__mark {
      @include outline.e-outline-pseudoclass();
    }
  }

  &:active,
  &.e-checkbox---hover:not(:disabled):not(:invalid) {
    .e-checkbox__mark {
      background-color: colors.color('elvia-charge');
      border-color: colors.color('elvia-off');
    }
  }

  &.e-checkbox---disabled {
    .e-checkbox__mark {
      border-color: colors.color('disabled');
      background-color: colors.color('disabled-light');
      cursor: not-allowed;
    }
    .e-checkbox__label {
      cursor: not-allowed;
    }
  }
  &.e-checkbox---disabled-checked {
    .e-checkbox__mark {
      @extend %checkbox-mark;
      border-color: colors.color('disabled') !important;
      background-color: colors.color('disabled-light') !important;
      cursor: not-allowed;

      &:after,
      &:before {
        background-color: colors.color('disabled') !important;
      }
    }
    .e-checkbox__label {
      color: colors.color('grey-70');
      cursor: not-allowed;
    }
  }
  // extends correct checkbox mark on compact checkboxes in pseudoclass
  &.e-checkbox--compact[class$='disabled-checked'] &__mark,
  &.e-checkbox--sm[class$='disabled-checked'] &__mark {
    @extend %checkbox-mark-compact;
  }

  &.e-checkbox---invalid {
    .e-checkbox__mark {
      border-color: colors.color('red');
    }
  }

  // hides initial checkbox and gives placeholder style according to state
  input {
    opacity: 0;
    position: absolute;
    z-index: -1;

    &:checked ~ .e-checkbox__mark {
      @extend %checkbox-mark;
      border-color: colors.color('elvia-off');
    }

    &:focus ~ .e-checkbox__mark {
      @include outline.e-outline();
    }

    @include helpers.hover() {
      &:hover:not(:disabled):not(:invalid) ~ .e-checkbox__mark {
        background-color: colors.color('elvia-charge');
        border-color: colors.color('elvia-off');
      }
    }

    &:disabled ~ .e-checkbox__mark {
      border-color: colors.color('disabled');
      background-color: colors.color('disabled-light');
      cursor: not-allowed;
    }
    &:disabled ~ .e-checkbox__label {
      color: colors.color('grey-70');
    }

    &:disabled:checked ~ .e-checkbox__mark {
      border-color: colors.color('disabled');
      background-color: colors.color('disabled-light');
      cursor: not-allowed;

      &:after,
      &:before {
        background-color: colors.color('disabled');
      }
    }
    &:disabled ~ .e-checkbox__label {
      color: colors.color('grey-70');
      cursor: not-allowed;
    }

    &:invalid ~ .e-checkbox__mark {
      border-color: colors.color('red');
    }
  }

  // Creating a placeholder to inject a checkbox mark into the checkbox
  // :before & :after each create a line which we put together to a checkmark.
  // Position properties top,left,right and bottom positions the lines to look like a checkmark.
  %checkbox-mark {
    position: relative;
    background-color: colors.color('elvia-charge');

    &::before {
      content: '';
      position: absolute;
      top: 12px;
      left: -2px;
      height: 30%;
      width: 2px;
      background-color: colors.color('elvia-off');
      border-radius: 15px;
      @include helpers.transform(translateX(10px) rotate(-45deg));
      @include helpers.transform-origin(left bottom);
      -o-animation: checkmarkHeight 150ms;
      -moz-animation: checkmarkHeight 150ms;
      -webkit-animation: checkmarkHeight 150ms;
      animation: checkmarkHeight 150ms;
    }

    &::after {
      content: '';
      position: absolute;
      bottom: 3px;
      left: -1px;
      height: 2px;
      width: 0%;
      background-color: colors.color('elvia-off');
      border-radius: 15px;
      @include helpers.transform(translateX(10px) rotate(-55deg));
      @include helpers.transform-origin(left bottom);
      -o-animation: checkmarkWidth 150ms 150ms forwards;
      -moz-animation: checkmarkWidth 150ms 150ms forwards;
      -webkit-animation: checkmarkWidth 150ms 150ms forwards;
      animation: checkmarkWidth 150ms 150ms forwards;
    }
  }

  %checkbox-mark-compact {
    position: relative;
    background-color: colors.color('elvia-charge');

    &::before {
      content: '';
      position: absolute;
      top: 50%;
      left: -28%;
      height: 39%;
      width: 1px;
      background-color: colors.color('elvia-off');
      border-radius: 15px;
      @include helpers.transform(translateX(10px) rotate(-45deg));
      @include helpers.transform-origin(left bottom);
      -o-animation: checkmarkHeightCompact 150ms;
      -moz-animation: checkmarkHeightCompact 150ms;
      -webkit-animation: checkmarkHeightCompact 150ms;
      animation: checkmarkHeightCompact 150ms;
    }

    &::after {
      content: '';
      position: absolute;
      bottom: 15%;
      left: -28%;
      height: 1px;
      width: 0%;
      background-color: colors.color('elvia-off');
      border-radius: 15px;
      @include helpers.transform(translateX(10px) rotate(-55deg));
      @include helpers.transform-origin(left bottom);
      -o-animation: checkmarkWidthCompact 150ms 150ms forwards;
      -moz-animation: checkmarkWidthCompact 150ms 150ms forwards;
      -webkit-animation: checkmarkWidthCompact 150ms 150ms forwards;
      animation: checkmarkWidthCompact 150ms 150ms forwards;
    }
  }
}

@include helpers.keyframes(checkmarkHeight) {
  0% {
    left: -31%;
    height: 0%;
  }

  100% {
    left: -9%;
    height: 30%;
  }
}

@include helpers.keyframes(checkmarkWidth) {
  0% {
    width: 0%;
  }

  100% {
    width: 83%;
  }
}

@include helpers.keyframes(checkmarkHeightCompact) {
  0% {
    left: -55%;
    height: 0%;
  }

  100% {
    left: -28%;
    height: 39%;
  }
}

@include helpers.keyframes(checkmarkWidthCompact) {
  0% {
    width: 0%;
  }

  100% {
    width: 80%;
  }
}
