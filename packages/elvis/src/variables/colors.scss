@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use '@elvia/elvis-colors/dist/colorMap.scss' as ColorMap;
@function color-map($name, $color-set: $colors) {
  $color-map: null;

  @if map.has-key($color-set, $name) {
    $color-map: map.get($color-set, $name);
  } @else {
    @each $label, $map in $color-set {
      @if list.index(map.get($map, alt-labels), $name) {
        $color-map: $map;
      }
    }
  }

  @if meta.global-variable-exists(override-colors) {
    @if map.has-key($override-colors, $name) {
      $color-map: map.get($override-colors, $name);
    } @else {
      @each $label, $map in $override-colors {
        @if list.index(map.get($map, alt-labels), $name) {
          $color-map: $map;
        }
      }
    }
  }

  @if not $color-map {
    @warn 'the color "#{$name}" was not found';
    @return null;
  }

  @return $color-map;
}

@function color($name, $color-set: $colors) {
  $map: color-map($name, $color-set);
  @return map.get($map, color);
}

@function internal-color($name, $color-set: $internal-colors) {
  $map: color-map($name, $color-set);
  @return map.get($map, color);
}

$primary-colors: ColorMap.$primary-colors;
$signal-colors: ColorMap.$signal-colors;
$data-colors: ColorMap.$data-colors;
$greys: ColorMap.$grey-colors;

$just-colors: map-merge($signal-colors, $data-colors);
// just-colors needs to also contain elvia-green (with an rgb value) for legacy
$just-colors: map.set(
  $just-colors,
  'green',
  map.set(map.get($primary-colors, 'green'), rgb, rgb(41, 211, 5))
);
$grey-primary: map-merge($greys, $primary-colors);
$colors: map-merge($just-colors, $grey-primary);

$internal-colors: ColorMap.$internal-colors;
