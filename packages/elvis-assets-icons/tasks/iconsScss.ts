import * as fs from 'fs';
import * as gulp from 'gulp';
import { getThemeColorContrast, getThemeColor, ColorLabel } from '@elvia/elvis-colors';

/** All the possible labels that can be used as css variables for icon colors. */
export type IconLabels =
  | 'stroke'
  | 'filled-foreground'
  | 'filled-background'
  | 'filled-foreground-colored'
  | 'on'
  | 'caution'
  | 'warning'
  | 'error';
type ColorLabelContrast = `${ColorLabel}--contrast`;
type IconClassToThemeColor = {
  [key: string]: { [label in IconLabels]?: ColorLabel | ColorLabelContrast };
};

/**
 * Used to set all the color css variables in an icon to the colors they should have.
 *
 * Stoke and 'filled-background' are set to the same color as the label, and the
 * 'filled-foreground' is set to the corresponding contrast color.
 */
const defaultLabeledIconWithContrast = (newClassName: ColorLabel): IconClassToThemeColor[string] => ({
  stroke: newClassName,
  'filled-background': newClassName,
  'filled-foreground': `${newClassName}--contrast`,
});

/**
 * Creates css classes in the format: `.e-icon--color-{label}` that set the color of the icon.
 * Different parts of the icon can be set to different colors.
 *
 * E.g. `.e-icon--color-on` sets the color of the icon that is labeled with stroke and 'filled-background' to the `icon-on` color.
 */
const iconClassToThemeColor: IconClassToThemeColor = {
  inverted: {
    stroke: 'icon-stroke',
    'filled-foreground': 'icon-filled-foreground',
    'filled-background': 'icon-filled-background',
  },
  disabled: { stroke: 'state-disabled', 'filled-background': 'state-disabled' },
  gray: { stroke: 'state-disabled', 'filled-background': 'state-disabled' },
  placeholder: { stroke: 'text-placeholder', 'filled-background': 'text-placeholder' },
  on: defaultLabeledIconWithContrast('icon-on'),
  green: defaultLabeledIconWithContrast('icon-on'),
  caution: defaultLabeledIconWithContrast('icon-caution'),
  yellow: defaultLabeledIconWithContrast('icon-caution'),
  warning: defaultLabeledIconWithContrast('icon-warning'),
  orange: defaultLabeledIconWithContrast('icon-warning'),
  error: defaultLabeledIconWithContrast('icon-error'),
  danger: defaultLabeledIconWithContrast('icon-error'),
  red: defaultLabeledIconWithContrast('icon-error'),
  white: defaultLabeledIconWithContrast('static-white'),
  black: defaultLabeledIconWithContrast('static-black'),
};

const WARNING = `// THIS FILE IS AUTOMATICALLY GENERATED AND WILL BE OVERWRITTEN.
// DO NOT MAKE CHANGES TO THIS FILE DIRECTLY.\n\n`;

const isContrastColor = (color: ColorLabel | ColorLabelContrast): color is ColorLabelContrast =>
  typeof color === 'string' && color.endsWith('--contrast');

const getScssColors = (colors: IconClassToThemeColor[string]) => {
  let scssColors = '';
  for (const [label, color] of Object.entries(colors)) {
    if (isContrastColor(color)) {
      scssColors += `'${label}': ${getThemeColorContrast(color.replace('--contrast', '') as ColorLabel)}, `;
    } else {
      scssColors += `'${label}': ${getThemeColor(color)}, `;
    }
  }
  return scssColors;
};

const generateIconColorClassesMap = () => {
  let fileContent = `$icon-theme-classes: (\n`;
  for (const [label, colors] of Object.entries(iconClassToThemeColor)) {
    if (label === 'inverted') {
      fileContent += `\t'${label}': ( ${getScssColors(colors)} ),\n`;
    } else {
      fileContent += `\t'color-${label}': ( ${getScssColors(colors)} ),\n`;
    }
  }
  fileContent += `);\n\n`;

  return fileContent;
};

const writeIconThemeVariables = async () => {
  const fileContent = WARNING + generateIconColorClassesMap();
  fs.writeFileSync('./dist/scss/themeVariables.scss', fileContent);
  return true;
};

const makeDistFolder = async () => {
  const dir = './dist/scss';
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  return true;
};

const generateIconsScss = gulp.series(makeDistFolder, writeIconThemeVariables);

export { generateIconsScss };
